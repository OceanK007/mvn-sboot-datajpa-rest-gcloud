application.status=ACTIVE

#######################################::: Logging :::##########################################
######## Logging levels ########
#Level	Color

#FATAL	Red
#ERROR	Red
#WARN	Yellow
#INFO	Green
#DEBUG	Green		| It will display all debug lines on console if set on root level
#TRACE	Green

## Logging for console
logging.level.root=INFO
logging.level.org.springframework.web=WARN
logging.level.org.hibernate=ERROR
logging.level.org.hibernate.SQL=DEBUG

# Logging to a temp_folder/file
logging.file=${java.io.tmpdir}/application.log

# Logging to a file
#logging.file=D:/application.log

# Logging pattern for the console
#logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %green(%-5level) %cyan(%logger{100}) - %msg%n
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{100} - %msg%n

# Logging pattern for file
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{100} - %msg%n

# Enabling color-coded logging output | If your terminal supports ANSI
# Values can be: ALWAYS, NEVER or DETECT(default)
# spring.output.ansi.enabled=ALWAYS

# If you want multiple logging file configuration then you need to create .xml file for logging

#################################################################################################

# The H2 Console application lets you access a database using a browser. 
# This can be a H2 database, or another database that supports the JDBC API. 
# This is a client/server application, so both a server and a client (a browser) are required to run it.
spring.h2.console.enabled=true