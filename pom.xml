<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.ocean.springboot</groupId>
	<artifactId>mvn-sboot-datajpa-rest-gcloud</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>
  
  	<parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.7.RELEASE</version>
    </parent>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        
        <!-- Additional: Adding unit tests  -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        
        <!-- Additional: Management services (health, audit, beans) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
    </dependencies>

    <properties>
        <java.version>1.8</java.version>
    </properties>

	<!--*********************************************************************
	*************************************************************************
		The Spring Boot Maven plugin provides many convenient features:
	
		* 	It collects all the jars on the classpath and builds a single, runnable "über-jar", which makes it more convenient to execute and transport your service.
		*	It searches for the public static void main() method to flag as a runnable class.
		*	It provides a built-in dependency resolver that sets the version number to match Spring Boot dependencies. You can override any version you wish, but it will default to Boot’s chosen set of versions.
	*************************************************************************
	**********************************************************************-->
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
    
    <!--*********************************************************************
    *************************************************************************
    	To run the application, there are two approaches:
    	
    	** Approach first **
    	1. cd project-folder-name
    	2. mvn clean install -DskipTests   || mvn package	(It will create the jar/war file of project)
    	3. java -jar target/jar-or-war-name-with-extension
    	
    	** Approach second **
    	1. cd project-folder-name
    	2. mvn sprint-boot:run
    
    *************************************************************************
    **********************************************************************-->
</project>